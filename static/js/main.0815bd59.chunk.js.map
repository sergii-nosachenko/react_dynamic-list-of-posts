{"version":3,"sources":["utils/fetchClient.ts","types/Status.enum.ts","redux/slices/userSlice.ts","api/users.ts","api/posts.ts","redux/slices/postSlice.ts","api/comments.ts","redux/slices/commentSlice.ts","redux/store.ts","components/Loader/Loader.tsx","components/Notification/Notification.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","components/UserSelector/UserSelector.tsx","components/Main/Main.tsx","components/Comment/Comment.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Comments/Comments.tsx","components/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","json","reject","status","EStatus","client","fetchUsers","createAsyncThunk","userSlice","createSlice","name","initialState","users","currentUser","IDLE","reducers","setCurrentUser","state","action","payload","extraReducers","builder","addCase","fulfilled","SUCCESS","pending","PENDING","rejected","ERROR","actions","getUserPosts","userId","fetchUserPosts","postSlice","posts","currentPost","setCurrentPost","postNewComment","comment","fetchPostComments","fetchNewComment","commentSlice","comments","newCommentStatus","removeComment","commentId","id","filter","push","store","configureStore","reducer","userReducer","postReducer","commentReducer","Loader","className","Notification","isStyle","message","cypressData","classNames","Post","post","useSelector","useState","isCurrent","setIsCurrent","dispatch","useDispatch","useEffect","title","type","onClick","PostsList","map","UserSelector","listVisible","setListVisible","dropdownTrigger","useRef","dropdown","handleClick","event","current","contains","target","document","addEventListener","removeEventListener","ref","role","user","href","preventDefault","Main","userStatus","postsStatus","length","Comment","email","pattern","NewCommentForm","postId","setName","setEmail","setBody","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","isNameDefined","isEmailDefined","isEmailCorrect","test","isBodyDefined","checkName","checkEmail","checkBody","allCorrect","handleSubmit","onSubmit","htmlFor","placeholder","value","onChange","onBlur","Comments","isFormVisible","setIsFormVisible","PostDetails","postData","setPostData","Sidebar","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0815bd59.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(response.status);\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum EStatus {\n  IDLE = 'idle',\n  PENDING = 'pending',\n  ERROR = 'error',\n  SUCCESS = 'success',\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { getUsers } from '../../api/users';\n\nimport { EStatus } from '../../types/Status.enum';\nimport { IUser } from '../../types/User.interface';\n\nexport const fetchUsers = createAsyncThunk(\n  'user/fetchUsers',\n  async () => {\n    const response = await getUsers();\n\n    return response;\n  },\n);\n\ntype TUSerState = {\n  users: IUser[],\n  currentUser: IUser | null,\n  status: EStatus,\n};\n\n/* eslint-disable no-param-reassign */\n// Raason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    users: [],\n    currentUser: null,\n    status: EStatus.IDLE,\n  } as TUSerState,\n  reducers: {\n    setCurrentUser: (\n      state,\n      action: { type: string, payload: IUser | null },\n    ) => {\n      state.currentUser = action.payload;\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchUsers.fulfilled, (state, action) => {\n        state.users = action.payload;\n        state.status = EStatus.SUCCESS;\n      })\n      .addCase(fetchUsers.pending, state => {\n        state.status = EStatus.PENDING;\n      })\n      .addCase(fetchUsers.rejected, state => {\n        state.status = EStatus.ERROR;\n      });\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport const { setCurrentUser } = userSlice.actions;\nexport default userSlice.reducer;\n","import { IUser } from '../types/User.interface';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => (\n  client.get<IUser[]>('/users')\n);\n","import { IPost } from '../types/Post.interface';\n\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => (\n  client.get<IPost[]>(`/posts?userId=${userId}`)\n);\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { getUserPosts } from '../../api/posts';\n\nimport { IPost } from '../../types/Post.interface';\nimport { EStatus } from '../../types/Status.enum';\n\nexport const fetchUserPosts = createAsyncThunk(\n  'user/fetchPosts',\n  async (userId: number) => {\n    const response = await getUserPosts(userId);\n\n    return response;\n  },\n);\n\ntype TPostState = {\n  posts: IPost[],\n  currentPost: IPost | null,\n  status: EStatus,\n};\n\n/* eslint-disable no-param-reassign */\n// Raason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst postSlice = createSlice({\n  name: 'user',\n  initialState: {\n    posts: [],\n    currentPost: null,\n    status: EStatus.IDLE,\n  } as TPostState,\n  reducers: {\n    setCurrentPost: (\n      state,\n      action: { type: string, payload: IPost | null },\n    ) => {\n      state.currentPost = action.payload;\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchUserPosts.fulfilled, (state, action) => {\n        state.posts = action.payload;\n        state.status = EStatus.SUCCESS;\n      })\n      .addCase(fetchUserPosts.pending, state => {\n        state.status = EStatus.PENDING;\n      })\n      .addCase(fetchUserPosts.rejected, state => {\n        state.status = EStatus.ERROR;\n      });\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport const { setCurrentPost } = postSlice.actions;\nexport default postSlice.reducer;\n","import { client } from '../utils/fetchClient';\n\nimport { IComment } from '../types/Comment.interface';\n\nexport const getPostComments = (postId: number) => (\n  client.get<IComment[]>(`/comments?postId=${postId}`)\n);\n\n// eslint-disable-next-line max-len\nexport type TCommentToPost = Pick<IComment, 'name' | 'email' | 'body' | 'postId'>;\n\nexport const postNewComment = (comment: TCommentToPost) => (\n  client.post<IComment>('/comments', comment)\n);\n\nexport const deleteComment = (commentId: number) => (\n  client.delete(`/comments/${commentId}`)\n);\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport {\n  deleteComment,\n  getPostComments,\n  postNewComment,\n  TCommentToPost,\n} from '../../api/comments';\n\nimport { IComment } from '../../types/Comment.interface';\nimport { EStatus } from '../../types/Status.enum';\n\nexport const fetchPostComments = createAsyncThunk(\n  'user/fetchPostComments',\n  async (userId: number) => {\n    const response = await getPostComments(userId);\n\n    return response;\n  },\n);\n\nexport const fetchNewComment = createAsyncThunk(\n  'user/fetchNewComment',\n  async (comment: TCommentToPost) => {\n    const response = await postNewComment(comment);\n\n    return response;\n  },\n);\n\ntype TCommentState = {\n  comments: IComment[],\n  status: EStatus,\n  newCommentStatus: EStatus,\n};\n\n/* eslint-disable no-param-reassign */\n// Raason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst commentSlice = createSlice({\n  name: 'user',\n  initialState: {\n    comments: [],\n    status: EStatus.IDLE,\n    newCommentStatus: EStatus.IDLE,\n  } as TCommentState,\n  reducers: {\n    removeComment: (state, action) => {\n      if (!action.payload.id) {\n        return;\n      }\n\n      state.comments = state.comments.filter(\n        comment => comment.id !== action.payload?.id,\n      );\n\n      deleteComment(action.payload.id);\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPostComments.fulfilled, (state, action) => {\n        state.comments = action.payload;\n        state.status = EStatus.SUCCESS;\n      })\n      .addCase(fetchPostComments.pending, state => {\n        state.status = EStatus.PENDING;\n      })\n      .addCase(fetchPostComments.rejected, state => {\n        state.status = EStatus.ERROR;\n      });\n\n    builder\n      .addCase(fetchNewComment.fulfilled, (state, action) => {\n        state.comments.push(action.payload);\n        state.newCommentStatus = EStatus.SUCCESS;\n      })\n      .addCase(fetchNewComment.pending, state => {\n        state.newCommentStatus = EStatus.PENDING;\n      })\n      .addCase(fetchNewComment.rejected, state => {\n        state.newCommentStatus = EStatus.ERROR;\n      });\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport const { removeComment } = commentSlice.actions;\nexport default commentSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport userReducer from './slices/userSlice';\nimport postReducer from './slices/postSlice';\nimport commentReducer from './slices/commentSlice';\n\nexport const store = configureStore({\n  reducer: {\n    users: userReducer,\n    posts: postReducer,\n    comments: commentReducer,\n  },\n});\n\nexport type TRootState = ReturnType<typeof store.getState>;\nexport type TRootDispatch = typeof store.dispatch;\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\n\ntype TProps = {\n  isStyle: 'is-danger' | 'is-warning';\n  message: string;\n  cypressData?: string;\n};\n\nexport const Notification: React.FC<TProps> = ({\n  isStyle,\n  message,\n  cypressData = null,\n}) => {\n  return (\n    <>\n      <div\n        className={classNames(\n          'notification', {\n            [isStyle]: isStyle,\n          },\n        )}\n        data-cy={cypressData}\n      >\n        {message}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { TRootDispatch, TRootState } from '../../redux/store';\nimport { IPost } from '../../types/Post.interface';\nimport { setCurrentPost } from '../../redux/slices/postSlice';\n\ntype TProps = {\n  post: IPost;\n};\n\nexport const Post: React.FC<TProps> = ({ post }) => {\n  const { currentPost } = useSelector((state: TRootState) => state.posts);\n  const [isCurrent, setIsCurrent] = useState(false);\n\n  const dispatch: TRootDispatch = useDispatch();\n\n  useEffect(() => {\n    setIsCurrent(post.id === currentPost?.id);\n  }, [currentPost]);\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            {\n              'is-light': !isCurrent,\n            },\n          )}\n          onClick={() => {\n            const current = isCurrent ? null : post;\n\n            dispatch(setCurrentPost(current));\n          }}\n        >\n          {isCurrent ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { useSelector } from 'react-redux';\n\nimport { TRootState } from '../../redux/store';\n\nimport { Post } from '../Post/Post';\n\nexport const PostsList: React.FC = () => {\n  const { posts } = useSelector((state: TRootState) => state.posts);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <Post post={post} key={post.id} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { setCurrentUser } from '../../redux/slices/userSlice';\nimport { setCurrentPost } from '../../redux/slices/postSlice';\n\nimport { TRootDispatch, TRootState } from '../../redux/store';\n\nimport './UserSelector.scss';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    currentUser,\n  } = useSelector((state: TRootState) => state.users);\n  const [listVisible, setListVisible] = useState(false);\n\n  const dropdownTrigger = useRef<HTMLDivElement | null>(null);\n  const dropdown = useRef<HTMLDivElement | null>(null);\n\n  const dispatch: TRootDispatch = useDispatch();\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      if (!dropdown.current || !dropdownTrigger.current) {\n        return;\n      }\n\n      if (dropdown.current.contains(event.target as Node)) {\n        return;\n      }\n\n      if (dropdownTrigger.current.contains(event.target as Node)) {\n        return;\n      }\n\n      setListVisible(false);\n    };\n\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, [listVisible]);\n\n  return (\n    <div className=\"block\">\n      <div\n        data-cy=\"UserSelector\"\n        className={classNames(\n          'dropdown',\n          {\n            'is-active': listVisible,\n          },\n        )}\n      >\n        <div\n          className=\"dropdown-trigger\"\n          ref={dropdownTrigger}\n        >\n          <button\n            type=\"button\"\n            className=\"button\"\n            aria-haspopup=\"true\"\n            aria-controls=\"dropdown-menu\"\n            onClick={() => setListVisible(!listVisible)}\n          >\n            {currentUser ? (\n              <span>{currentUser.name}</span>\n            ) : (\n              <span>Choose a user</span>\n            )}\n\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n            </span>\n          </button>\n        </div>\n\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n          ref={dropdown}\n        >\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#${user.id}`}\n                key={user.id}\n                className={classNames(\n                  'dropdown-item',\n                  {\n                    'is-active': user.id === currentUser?.id,\n                  },\n                )}\n                onClick={event => {\n                  event.preventDefault();\n\n                  setListVisible(false);\n                  dispatch(setCurrentUser(user));\n                  dispatch(setCurrentPost(null));\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Loader } from '../Loader/Loader';\nimport { Notification } from '../Notification/Notification';\nimport { PostsList } from '../PostsList/PostsList';\nimport { UserSelector } from '../UserSelector/UserSelector';\n\nimport { fetchUsers } from '../../redux/slices/userSlice';\nimport { fetchUserPosts } from '../../redux/slices/postSlice';\n\nimport { EStatus } from '../../types/Status.enum';\nimport { TRootDispatch, TRootState } from '../../redux/store';\n\nexport const Main: React.FC = () => {\n  const {\n    currentUser,\n    status: userStatus,\n  } = useSelector((state: TRootState) => state.users);\n  const {\n    posts,\n    status: postsStatus,\n  } = useSelector((state: TRootState) => state.posts);\n\n  const dispatch: TRootDispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  useEffect(() => {\n    if (!currentUser) {\n      return;\n    }\n\n    dispatch(fetchUserPosts(currentUser.id));\n  }, [currentUser]);\n\n  return (\n    <div className=\"tile is-parent\">\n      <div className=\"tile is-child box is-success\">\n        <UserSelector />\n\n        <div className=\"block\" data-cy=\"MainContent\">\n          {userStatus === EStatus.SUCCESS && !currentUser && (\n            <p data-cy=\"NoSelectedUser\">\n              No user selected\n            </p>\n          )}\n\n          {userStatus === EStatus.ERROR && (\n            <Notification\n              isStyle=\"is-danger\"\n              message=\"Something went wrong during users loading!\"\n              cypressData=\"UsersLoadingError\"\n            />\n          )}\n\n          {postsStatus === EStatus.SUCCESS && (\n            posts.length ? (\n              <PostsList />\n            ) : (\n              <Notification\n                isStyle=\"is-warning\"\n                message=\"No posts yet\"\n                cypressData=\"NoPostsYet\"\n              />\n            )\n          )}\n\n          {postsStatus === EStatus.ERROR && (\n            <Notification\n              isStyle=\"is-danger\"\n              message=\"Something went wrong during posts loading!\"\n              cypressData=\"PostsLoadingError\"\n            />\n          )}\n\n          {(postsStatus === EStatus.PENDING) && (\n            <Loader />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\n\nimport { removeComment } from '../../redux/slices/commentSlice';\nimport { TRootDispatch } from '../../redux/store';\n\nimport { IComment } from '../../types/Comment.interface';\n\nimport './Comment.scss';\n\ntype TProps = {\n  comment: IComment;\n};\n\nexport const Comment: React.FC<TProps> = ({ comment }) => {\n  const dispatch: TRootDispatch = useDispatch();\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${comment.email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => dispatch(removeComment(comment))}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { TRootDispatch, TRootState } from '../../redux/store';\nimport { EStatus } from '../../types/Status.enum';\nimport { fetchNewComment } from '../../redux/slices/commentSlice';\n\ntype TProps = {\n  postId: number;\n};\n\n// eslint-disable-next-line max-len\nconst pattern = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\nexport const NewCommentForm: React.FC<TProps> = ({ postId }) => {\n  const { newCommentStatus } = useSelector(\n    (state: TRootState) => state.comments,\n  );\n\n  const dispatch: TRootDispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [nameError, setNameError] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [bodyError, setBodyError] = useState('');\n\n  const isNameDefined = () => name;\n  const isEmailDefined = () => email;\n  const isEmailCorrect = () => pattern.test(email);\n  const isBodyDefined = () => body;\n\n  const checkName = () => {\n    if (!isNameDefined()) {\n      setNameError('Name is required');\n\n      return;\n    }\n\n    setNameError('');\n  };\n\n  const checkEmail = () => {\n    if (!isEmailDefined()) {\n      setEmailError('Email is required');\n\n      return;\n    }\n\n    if (!isEmailCorrect()) {\n      setEmailError('Email is invalid');\n\n      return;\n    }\n\n    setEmailError('');\n  };\n\n  const checkBody = () => {\n    if (!isBodyDefined()) {\n      setBodyError('Enter some text');\n\n      return;\n    }\n\n    setBodyError('');\n  };\n\n  const checkAllFields = () => {\n    checkName();\n    checkEmail();\n    checkBody();\n  };\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setNameError('');\n    setEmailError('');\n    setBodyError('');\n  };\n\n  const allCorrect = isNameDefined()\n    && isEmailDefined()\n    && isBodyDefined()\n    && isEmailCorrect();\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!allCorrect) {\n      checkAllFields();\n\n      return;\n    }\n\n    dispatch(fetchNewComment({\n      name,\n      email,\n      body,\n      postId,\n    }));\n\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name}\n            onChange={event => setName(event.target.value)}\n            onBlur={checkName}\n            className={classNames(\n              'input',\n              {\n                'is-danger': nameError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {nameError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n            onBlur={checkEmail}\n            className={classNames(\n              'input',\n              {\n                'is-danger': emailError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {emailError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={body}\n            onChange={event => setBody(event.target.value)}\n            onBlur={checkBody}\n            className={classNames(\n              'input',\n              {\n                'is-danger': bodyError,\n              },\n            )}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {bodyError}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': newCommentStatus === EStatus.PENDING,\n              },\n            )}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Comment } from '../Comment/Comment';\nimport { Loader } from '../Loader/Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\n\nimport { fetchPostComments } from '../../redux/slices/commentSlice';\n\nimport { TRootDispatch, TRootState } from '../../redux/store';\nimport { EStatus } from '../../types/Status.enum';\nimport { Notification } from '../Notification/Notification';\n\nexport const Comments: React.FC = () => {\n  const {\n    comments,\n    status,\n  } = useSelector((state: TRootState) => state.comments);\n  const { currentPost } = useSelector((state: TRootState) => state.posts);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  const dispatch: TRootDispatch = useDispatch();\n\n  useEffect(() => {\n    if (!currentPost) {\n      return;\n    }\n\n    dispatch(fetchPostComments(currentPost.id));\n\n    // eslint-disable-next-line consistent-return\n    return () => setIsFormVisible(false);\n  }, [currentPost]);\n\n  if (!currentPost) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"block\">\n        {status === EStatus.PENDING && (\n          <Loader />\n        )}\n\n        {status === EStatus.ERROR && (\n          <Notification\n            isStyle=\"is-danger\"\n            message=\"Something went wrong during comments loading!\"\n            cypressData=\"CommentsError\"\n          />\n        )}\n\n        {status === EStatus.SUCCESS && (\n          !comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )\n            : comments.map(comment => (\n              <Comment comment={comment} key={comment.id} />\n            ))\n        )}\n\n        {!isFormVisible && status === EStatus.SUCCESS && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsFormVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n      </div>\n\n      {isFormVisible && (\n        <NewCommentForm postId={currentPost.id} />\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Comments } from '../Comments/Comments';\n\nimport { TRootState } from '../../redux/store';\nimport { IPost } from '../../types/Post.interface';\n\nexport const PostDetails: React.FC = () => {\n  const { currentPost } = useSelector((state: TRootState) => state.posts);\n  const [postData, setPostData] = useState<IPost | null>(null);\n\n  useEffect(() => {\n    if (!currentPost) {\n      setTimeout(() => setPostData(null), 500);\n    } else {\n      setPostData(currentPost);\n    }\n  }, [currentPost]);\n\n  if (!postData) {\n    return null;\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${postData.id}: `}\n          {postData.title}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {postData.body}\n        </p>\n      </div>\n\n      <Comments />\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { PostDetails } from '../PostDetails/PostDetails';\n\nimport { TRootState } from '../../redux/store';\n\nimport './Sidebar.scss';\n\nexport const Sidebar: React.FC = () => {\n  const { currentPost } = useSelector((state: TRootState) => state.posts);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        {\n          'Sidebar--open': currentPost,\n        },\n      )}\n    >\n      <div className=\"tile is-child box is-success\">\n        <PostDetails />\n      </div>\n    </div>\n  );\n};\n","import { Main } from './components/Main/Main';\nimport { Sidebar } from './components/Sidebar/Sidebar';\n\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <Main />\n          <Sidebar />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}